{
  "info": {
    "description": "This is the API Specification of the Warm-Starting Service.",
    "title": "Warm-Starting Service API",
    "version": "0.1"
  },
  "license": {
    "name": "Apache v2 License"
  },
  "paths": {
    "/initialStateMaxCut": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitialStateMaxCutResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitialStateMaxCutRequest"
              },
              "example": {
                "graph": [
                  [
                    0,
                    3,
                    3,
                    6,
                    9,
                    1
                  ],
                  [
                    3,
                    0,
                    4,
                    4,
                    -8,
                    4
                  ],
                  [
                    3,
                    4,
                    0,
                    3,
                    -7,
                    1
                  ],
                  [
                    6,
                    4,
                    3,
                    0,
                    -7,
                    6
                  ],
                  [
                    9,
                    -8,
                    -7,
                    -7,
                    0,
                    -5
                  ],
                  [
                    1,
                    4,
                    1,
                    6,
                    -5,
                    0
                  ]
                ],
                "classicalAlgorithm": "GW",
                "repetitions": "10",
                "rounded": "true"
              }
            }
          }
        },
        "summary": "Precompute classical MaxCut solution.",
        "tags": [
          "warmstarting"
        ]
      }
    },
    "/initialParametersRegularGraphMaxCut": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixedParametersRegularGraphMaxCutResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FixedParametersRegularGraphMaxCutRequest"
              },
              "example": {
                "qaoaDepth": 2,
                "graph": [
                  [
                    0,
                    3,
                    3,
                    6,
                    9,
                    1
                  ],
                  [
                    3,
                    0,
                    4,
                    4,
                    -8,
                    4
                  ],
                  [
                    3,
                    4,
                    0,
                    3,
                    -7,
                    1
                  ],
                  [
                    6,
                    4,
                    3,
                    0,
                    -7,
                    6
                  ],
                  [
                    9,
                    -8,
                    -7,
                    -7,
                    0,
                    -5
                  ],
                  [
                    1,
                    4,
                    1,
                    6,
                    -5,
                    0
                  ]
                ]
              }
            }
          }
        },
        "summary": "Execute a given quantum circuit on a specified quantum computer.",
        "tags": [
          "warmstarting"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "warmstarting",
      "description": "Warm-Starting techniques for quantum algorithms"
    }
  ],
  "openapi": "3.0.2",
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error code"
          },
          "errors": {
            "type": "object",
            "description": "Errors"
          },
          "status": {
            "type": "string",
            "description": "Error name"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "PaginationMetadata": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "total_pages": {
            "type": "integer"
          },
          "first_page": {
            "type": "integer"
          },
          "last_page": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          },
          "previous_page": {
            "type": "integer"
          },
          "next_page": {
            "type": "integer"
          }
        }
      },
      "InitialStateMaxCutRequest": {
        "type": "object",
        "properties": {
          "repetitions": {
            "type": "integer"
          },
          "classicalAlgorithm": {
            "type": "string"
          },
          "graph": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "rounded": {
            "type": "boolean"
          }
        },
        "required": [
          "graph"
        ]
      },
      "InitialStateMaxCutResponse": {
        "type": "object",
        "properties": {
          "bitstring": {
            "type": "string"
          },
          "value": {
            "type": "integer"
          }
        }
      },
      "FixedParametersRegularGraphMaxCutRequest": {
        "type": "object",
        "properties": {
          "graph": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          "regularity": {
            "type": "integer"
          },
          "qaoaDepth": {
            "type": "integer"
          }
        },
        "required": [
          "qaoaDepth"
        ]
      },
      "FixedParametersRegularGraphMaxCutResponse": {
        "type": "object",
        "properties": {
          "approximationRatio": {
            "type": "number"
          },
          "gammas": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "betas": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      }
    },
    "responses": {
      "UNPROCESSABLE_ENTITY": {
        "description": "Unprocessable Entity",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "DEFAULT_ERROR": {
        "description": "Default error response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}